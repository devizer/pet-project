/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.1.6309.31527 (NJsonSchema v8.30.6304.31883) (http://NSwag.org)
// </auto-generated>
//----------------------
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var todoClient;
(function (todoClient_1) {
    var todoClient;
    (function (todoClient) {
        var ListsClient = (function () {
            function ListsClient($http, $q, baseUrl) {
                this.baseUrl = undefined;
                this.jsonParseReviver = undefined;
                this.http = $http;
                this.q = $q;
                this.baseUrl = baseUrl ? baseUrl : "";
            }
            ListsClient.prototype.add = function (title) {
                var _this = this;
                var url_ = this.baseUrl + "/api/v1/lists?";
                if (title === undefined)
                    throw new Error("The parameter 'title' must be defined.");
                else
                    url_ += "title=" + encodeURIComponent("" + title) + "&";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = "";
                var options_ = {
                    url: url_,
                    method: "PUT",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        "Accept": "application/json; charset=UTF-8"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processAdd(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processAdd(_response);
                    throw _response;
                });
            };
            ListsClient.prototype.processAdd = function (_response) {
                var _status = _response.status;
                if (_status === 400) {
                    var _responseText = _response.data;
                    return throwException(this.q, "A server error occurred.", _status, _responseText);
                }
                else if (_status !== 200 && _status !== 204) {
                    var _responseText = _response.data;
                    return throwException(this.q, "An unexpected server error occurred.", _status, _responseText);
                }
                return this.q.resolve(null);
            };
            ListsClient.prototype.getAll = function () {
                var _this = this;
                var url_ = this.baseUrl + "/api/v1/lists";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = "";
                var options_ = {
                    url: url_,
                    method: "GET",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        "Accept": "application/json; charset=UTF-8"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processGetAll(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processGetAll(_response);
                    throw _response;
                });
            };
            ListsClient.prototype.processGetAll = function (_response) {
                var _status = _response.status;
                if (_status === 200) {
                    var _responseText = _response.data;
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                            var item = resultData200_1[_i];
                            result200.push(TodoList.fromJS(item));
                        }
                    }
                    return this.q.resolve(result200);
                }
                else if (_status !== 200 && _status !== 204) {
                    var _responseText = _response.data;
                    return throwException(this.q, "An unexpected server error occurred.", _status, _responseText);
                }
                return this.q.resolve(null);
            };
            ListsClient.prototype["delete"] = function (idList) {
                var _this = this;
                var url_ = this.baseUrl + "/api/v1/lists/{idList}";
                if (idList === undefined || idList === null)
                    throw new Error("The parameter 'idList' must be defined.");
                url_ = url_.replace("{idList}", encodeURIComponent("" + idList));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = "";
                var options_ = {
                    url: url_,
                    method: "DELETE",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        "Accept": "application/json; charset=UTF-8"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processDelete(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processDelete(_response);
                    throw _response;
                });
            };
            ListsClient.prototype.processDelete = function (_response) {
                var _status = _response.status;
                if (_status === 404) {
                    var _responseText = _response.data;
                    return throwException(this.q, "A server error occurred.", _status, _responseText);
                }
                else if (_status !== 200 && _status !== 204) {
                    var _responseText = _response.data;
                    return throwException(this.q, "An unexpected server error occurred.", _status, _responseText);
                }
                return this.q.resolve(null);
            };
            ListsClient.prototype.update = function (idList, title) {
                var _this = this;
                var url_ = this.baseUrl + "/api/v1/lists/{idList}/title?";
                if (idList === undefined || idList === null)
                    throw new Error("The parameter 'idList' must be defined.");
                url_ = url_.replace("{idList}", encodeURIComponent("" + idList));
                if (title === undefined)
                    throw new Error("The parameter 'title' must be defined.");
                else
                    url_ += "title=" + encodeURIComponent("" + title) + "&";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = "";
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        "Accept": "application/json; charset=UTF-8"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processUpdate(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processUpdate(_response);
                    throw _response;
                });
            };
            ListsClient.prototype.processUpdate = function (_response) {
                var _status = _response.status;
                if (_status === 404) {
                    var _responseText = _response.data;
                    return throwException(this.q, "A server error occurred.", _status, _responseText);
                }
                else if (_status === 400) {
                    var _responseText = _response.data;
                    return throwException(this.q, "A server error occurred.", _status, _responseText);
                }
                else if (_status !== 200 && _status !== 204) {
                    var _responseText = _response.data;
                    return throwException(this.q, "An unexpected server error occurred.", _status, _responseText);
                }
                return this.q.resolve(null);
            };
            return ListsClient;
        }());
        todoClient.ListsClient = ListsClient;
        var SystemClient = (function () {
            function SystemClient($http, $q, baseUrl) {
                this.baseUrl = undefined;
                this.jsonParseReviver = undefined;
                this.http = $http;
                this.q = $q;
                this.baseUrl = baseUrl ? baseUrl : "";
            }
            SystemClient.prototype.getBuildInfo = function () {
                var _this = this;
                var url_ = this.baseUrl + "/api/v1/system/build-info";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = "";
                var options_ = {
                    url: url_,
                    method: "GET",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        "Accept": "application/json; charset=UTF-8"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processGetBuildInfo(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processGetBuildInfo(_response);
                    throw _response;
                });
            };
            SystemClient.prototype.processGetBuildInfo = function (_response) {
                var _status = _response.status;
                if (_status === 200) {
                    var _responseText = _response.data;
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result200 = resultData200 !== undefined ? resultData200 : null;
                    return this.q.resolve(result200);
                }
                else if (_status !== 200 && _status !== 204) {
                    var _responseText = _response.data;
                    return throwException(this.q, "An unexpected server error occurred.", _status, _responseText);
                }
                return this.q.resolve(null);
            };
            SystemClient.prototype.getBuildInfo2 = function () {
                var _this = this;
                var url_ = this.baseUrl + "/api/v1/system/build-info";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = "";
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        "Accept": "application/json; charset=UTF-8"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processGetBuildInfo2(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processGetBuildInfo2(_response);
                    throw _response;
                });
            };
            SystemClient.prototype.processGetBuildInfo2 = function (_response) {
                var _status = _response.status;
                if (_status === 200) {
                    var _responseText = _response.data;
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result200 = resultData200 !== undefined ? resultData200 : null;
                    return this.q.resolve(result200);
                }
                else if (_status !== 200 && _status !== 204) {
                    var _responseText = _response.data;
                    return throwException(this.q, "An unexpected server error occurred.", _status, _responseText);
                }
                return this.q.resolve(null);
            };
            return SystemClient;
        }());
        todoClient.SystemClient = SystemClient;
        var TasksClient = (function () {
            function TasksClient($http, $q, baseUrl) {
                this.baseUrl = undefined;
                this.jsonParseReviver = undefined;
                this.http = $http;
                this.q = $q;
                this.baseUrl = baseUrl ? baseUrl : "";
            }
            TasksClient.prototype.addTask = function (idList, title, completed) {
                var _this = this;
                var url_ = this.baseUrl + "/api/v1/lists/{idList}/tasks?";
                if (idList === undefined || idList === null)
                    throw new Error("The parameter 'idList' must be defined.");
                url_ = url_.replace("{idList}", encodeURIComponent("" + idList));
                if (title === undefined)
                    throw new Error("The parameter 'title' must be defined.");
                else
                    url_ += "title=" + encodeURIComponent("" + title) + "&";
                if (completed === undefined || completed === null)
                    throw new Error("The parameter 'completed' must be defined and cannot be null.");
                else
                    url_ += "completed=" + encodeURIComponent("" + completed) + "&";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = "";
                var options_ = {
                    url: url_,
                    method: "PUT",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        "Accept": "application/json; charset=UTF-8"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processAddTask(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processAddTask(_response);
                    throw _response;
                });
            };
            TasksClient.prototype.processAddTask = function (_response) {
                var _status = _response.status;
                if (_status === 404) {
                    var _responseText = _response.data;
                    return throwException(this.q, "A server error occurred.", _status, _responseText);
                }
                else if (_status === 400) {
                    var _responseText = _response.data;
                    return throwException(this.q, "A server error occurred.", _status, _responseText);
                }
                else if (_status !== 200 && _status !== 204) {
                    var _responseText = _response.data;
                    return throwException(this.q, "An unexpected server error occurred.", _status, _responseText);
                }
                return this.q.resolve(null);
            };
            TasksClient.prototype.deleteTask = function (idList, idTask) {
                var _this = this;
                var url_ = this.baseUrl + "/api/v1/lists/{idList}/tasks/{idTask}";
                if (idList === undefined || idList === null)
                    throw new Error("The parameter 'idList' must be defined.");
                url_ = url_.replace("{idList}", encodeURIComponent("" + idList));
                if (idTask === undefined || idTask === null)
                    throw new Error("The parameter 'idTask' must be defined.");
                url_ = url_.replace("{idTask}", encodeURIComponent("" + idTask));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = "";
                var options_ = {
                    url: url_,
                    method: "DELETE",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        "Accept": "application/json; charset=UTF-8"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processDeleteTask(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processDeleteTask(_response);
                    throw _response;
                });
            };
            TasksClient.prototype.processDeleteTask = function (_response) {
                var _status = _response.status;
                if (_status === 404) {
                    var _responseText = _response.data;
                    return throwException(this.q, "A server error occurred.", _status, _responseText);
                }
                else if (_status !== 200 && _status !== 204) {
                    var _responseText = _response.data;
                    return throwException(this.q, "An unexpected server error occurred.", _status, _responseText);
                }
                return this.q.resolve(null);
            };
            TasksClient.prototype.updateTaskTitle = function (idList, idTask, title) {
                var _this = this;
                var url_ = this.baseUrl + "/api/v1/lists/{idList}/tasks/{idTask}/title?";
                if (idList === undefined || idList === null)
                    throw new Error("The parameter 'idList' must be defined.");
                url_ = url_.replace("{idList}", encodeURIComponent("" + idList));
                if (idTask === undefined || idTask === null)
                    throw new Error("The parameter 'idTask' must be defined.");
                url_ = url_.replace("{idTask}", encodeURIComponent("" + idTask));
                if (title === undefined)
                    throw new Error("The parameter 'title' must be defined.");
                else
                    url_ += "title=" + encodeURIComponent("" + title) + "&";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = "";
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        "Accept": "application/json; charset=UTF-8"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processUpdateTaskTitle(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processUpdateTaskTitle(_response);
                    throw _response;
                });
            };
            TasksClient.prototype.processUpdateTaskTitle = function (_response) {
                var _status = _response.status;
                if (_status === 404) {
                    var _responseText = _response.data;
                    return throwException(this.q, "A server error occurred.", _status, _responseText);
                }
                else if (_status === 400) {
                    var _responseText = _response.data;
                    return throwException(this.q, "A server error occurred.", _status, _responseText);
                }
                else if (_status !== 200 && _status !== 204) {
                    var _responseText = _response.data;
                    return throwException(this.q, "An unexpected server error occurred.", _status, _responseText);
                }
                return this.q.resolve(null);
            };
            TasksClient.prototype.updateTaskCompleted = function (idList, idTask, completed) {
                var _this = this;
                var url_ = this.baseUrl + "/api/v1/lists/{idList}/tasks/{idTask}/completed?";
                if (idList === undefined || idList === null)
                    throw new Error("The parameter 'idList' must be defined.");
                url_ = url_.replace("{idList}", encodeURIComponent("" + idList));
                if (idTask === undefined || idTask === null)
                    throw new Error("The parameter 'idTask' must be defined.");
                url_ = url_.replace("{idTask}", encodeURIComponent("" + idTask));
                if (completed === undefined || completed === null)
                    throw new Error("The parameter 'completed' must be defined and cannot be null.");
                else
                    url_ += "completed=" + encodeURIComponent("" + completed) + "&";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = "";
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        "Accept": "application/json; charset=UTF-8"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processUpdateTaskCompleted(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processUpdateTaskCompleted(_response);
                    throw _response;
                });
            };
            TasksClient.prototype.processUpdateTaskCompleted = function (_response) {
                var _status = _response.status;
                if (_status === 404) {
                    var _responseText = _response.data;
                    return throwException(this.q, "A server error occurred.", _status, _responseText);
                }
                else if (_status !== 200 && _status !== 204) {
                    var _responseText = _response.data;
                    return throwException(this.q, "An unexpected server error occurred.", _status, _responseText);
                }
                return this.q.resolve(null);
            };
            return TasksClient;
        }());
        todoClient.TasksClient = TasksClient;
        var TodoList = (function () {
            function TodoList(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            TodoList.prototype.init = function (data) {
                if (data) {
                    this.id = data["Id"] !== undefined ? data["Id"] : null;
                    this.title = data["Title"] !== undefined ? data["Title"] : null;
                    if (data["Tasks"] && data["Tasks"].constructor === Array) {
                        this.tasks = [];
                        for (var _i = 0, _a = data["Tasks"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.tasks.push(TodoTask.fromJS(item));
                        }
                    }
                }
            };
            TodoList.fromJS = function (data) {
                var result = new TodoList();
                result.init(data);
                return result;
            };
            TodoList.prototype.toJSON = function (data) {
                data = data ? data : {};
                data["Id"] = this.id !== undefined ? this.id : null;
                data["Title"] = this.title !== undefined ? this.title : null;
                if (this.tasks && this.tasks.constructor === Array) {
                    data["Tasks"] = [];
                    for (var _i = 0, _a = this.tasks; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["Tasks"].push(item.toJSON());
                    }
                }
                return data;
            };
            TodoList.prototype.clone = function () {
                var json = this.toJSON();
                var result = new TodoList();
                result.init(json);
                return result;
            };
            return TodoList;
        }());
        todoClient.TodoList = TodoList;
        var TodoTask = (function () {
            function TodoTask(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            TodoTask.prototype.init = function (data) {
                if (data) {
                    this.id = data["Id"] !== undefined ? data["Id"] : null;
                    this.title = data["Title"] !== undefined ? data["Title"] : null;
                    this.completed = data["Completed"] !== undefined ? data["Completed"] : null;
                    this.idList = data["IdList"] !== undefined ? data["IdList"] : null;
                    this.list = data["List"] ? TodoList.fromJS(data["List"]) : null;
                }
            };
            TodoTask.fromJS = function (data) {
                var result = new TodoTask();
                result.init(data);
                return result;
            };
            TodoTask.prototype.toJSON = function (data) {
                data = data ? data : {};
                data["Id"] = this.id !== undefined ? this.id : null;
                data["Title"] = this.title !== undefined ? this.title : null;
                data["Completed"] = this.completed !== undefined ? this.completed : null;
                data["IdList"] = this.idList !== undefined ? this.idList : null;
                data["List"] = this.list ? this.list.toJSON() : null;
                return data;
            };
            TodoTask.prototype.clone = function () {
                var json = this.toJSON();
                var result = new TodoTask();
                result.init(json);
                return result;
            };
            return TodoTask;
        }());
        todoClient.TodoTask = TodoTask;
        var SwaggerException = (function (_super) {
            __extends(SwaggerException, _super);
            function SwaggerException(message, status, response, result) {
                var _this = _super.call(this) || this;
                _this.message = message;
                _this.status = status;
                _this.response = response;
                _this.result = result;
                return _this;
            }
            return SwaggerException;
        }(Error));
        todoClient.SwaggerException = SwaggerException;
        function throwException(q, message, status, response, result) {
            return q.reject(new SwaggerException(message, status, response, result));
        }
        function blobToText(blob, q) {
            return new q(function (resolve) {
                var reader = new FileReader();
                reader.onload = function () {
                    resolve(this.result);
                };
                reader.readAsText(blob);
            });
        }
    })(todoClient || (todoClient = {}));
})(todoClient || (todoClient = {}));
