{"version":3,"sources":["webpack:///0.82f8b32beecad067e408.js","webpack:///./src/app/pages/todo/todo.module.js"],"names":["webpackJsonp","35","module","__webpack_exports__","__webpack_require__","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__todo_scss__","todoModule","n","angular","controller","$scope","$stateParams","$filter","api","$ctrl","this","create","get","s","console","log","er","todos","newTodo","editedTodo","$on","status","statusFilter","completed","addTodo","title","trim","saving","editTodo","todo","originalTodo","extend","saveEdits","event","saveEvent","reverted","revertEdits","indexOf","removeTodo","saveTodo","toggleCompleted","isDefined","clearCompletedTodos","markAll","forEach","default","i","36","exports"],"mappings":"AAAAA,cAAc,IAERC,GACA,SAAUC,EAAQC,EAAqBC,GAE7C,YACAC,QAAOC,eAAeH,EAAqB,cAAgBI,UACtC,IAAIC,GAA2CJ,EAAoB,ICElFK,GDDsEL,EAAoBM,EAAEF,GCC/EG,QAAQT,OAAO,eAC7BU,WAAW,kBADG,wCACe,SAAwBC,EAAQC,EAAcC,EAASC,GAGjF,GAAIC,GAAQC,IAEZF,GAAIG,OAAOC,IAAI,SAASC,GACpBC,QAAQC,IAAIF,IACb,SAASG,GACRF,QAAQC,IAAIC,IAGhB,IAAIC,GAAQR,EAAMQ,KAElBR,GAAMS,QAAU,GAChBT,EAAMU,WAAa,KASnBd,EAAOe,IAAI,sBAAuB,WAC9B,GAAIC,GAASZ,EAAMY,OAASf,EAAae,QAAU,EAG/CZ,GAAMa,aADK,WAAXD,GACsBE,cAEN,cAAXF,GACiBE,mBAO9Bd,EAAMe,QAAU,aAERC,MAAWhB,EAAMS,QAAQQ,OACzBH,eAGSE,QAIbhB,EAAMkB,YAUVlB,EAAMmB,SAAW,SAAUC,GACvBpB,EAAMU,WAAaU,EAEnBpB,EAAMqB,aAAe3B,QAAQ4B,UAAWF,IAG5CpB,EAAMuB,UAAY,SAAUH,EAAMI,GAG9B,MAAc,SAAVA,GAAwC,WAApBxB,EAAMyB,eAC1BzB,EAAMyB,UAAY,OAItBzB,EAAMyB,UAAYD,EAEdxB,EAAM0B,cAEN1B,EAAM0B,SAAW,OAIrBN,EAAKJ,MAAQI,EAAKJ,MAAMC,OAEpBG,EAAKJ,QAAUhB,EAAMqB,aAAaL,WAClChB,EAAMU,WAAa,gBAc3BV,EAAM2B,YAAc,SAAUP,GAC1BZ,EAAMA,EAAMoB,QAAQR,IAASpB,EAAMqB,aACnCrB,EAAMU,WAAa,KACnBV,EAAMqB,aAAe,KACrBrB,EAAM0B,aAGV1B,EAAM6B,WAAa,SAAUT,KAI7BpB,EAAM8B,SAAW,SAAUV,KAI3BpB,EAAM+B,gBAAkB,SAAUX,EAAMN,GAChCpB,QAAQsC,UAAUlB,KAClBM,EAAKN,UAAYA,IAUzBd,EAAMiC,oBAAsB,aAI5BjC,EAAMkC,QAAU,SAAUpB,GACtBN,EAAM2B,QAAQ,SAAUf,GAChBA,EAAKN,YAAcA,GACnBd,EAAM+B,gBAAgBX,EAAMN,SAQhD5B,GAAAkD,QAAAC,GDkBMC,GACA,SAAUrD,EAAQsD","file":"0.82f8b32beecad067e408.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 35:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__todo_scss__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__todo_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__todo_scss__);\n\n/* injects from baggage-loader */\n\n\n\n\n\n//import todoController from './todo.controller.js';\n\nvar todoModule = angular.module('TODO_MVC', []).controller('todoController', ['$scope', '$stateParams', '$filter', 'api', function todoController($scope, $stateParams, $filter, api /*, store*/) {\n    'use strict';\n\n    var $ctrl = this;\n\n    api.create.get(function (s) {\n        console.log(s);\n    }, function (er) {\n        console.log(er);\n    });\n\n    var todos = $ctrl.todos /*= store.todos*/;\n\n    $ctrl.newTodo = '';\n    $ctrl.editedTodo = null;\n\n    // $scope.$watch('todos', function () {\n    //     $ctrl.remainingCount = $filter('filter')(todos, {completed: false}).length;\n    //     $ctrl.completedCount = todos.length - $ctrl.remainingCount;\n    //     $ctrl.allChecked = !$ctrl.remainingCount;\n    // }, true);\n\n    // Monitor the current route for changes and adjust the filter accordingly.\n    $scope.$on('$stateChangeSuccess', function () {\n        var status = $ctrl.status = $stateParams.status || '';\n\n        if (status === 'active') {\n            $ctrl.statusFilter = { completed: false };\n        } else if (status === 'completed') {\n            $ctrl.statusFilter = { completed: true };\n        } else {\n            $ctrl.statusFilter = {};\n        }\n    });\n\n    $ctrl.addTodo = function () {\n        var newTodo = {\n            title: $ctrl.newTodo.trim(),\n            completed: false\n        };\n\n        if (!newTodo.title) {\n            return;\n        }\n\n        $ctrl.saving = true;\n        // store.insert(newTodo)\n        //     .then(function success() {\n        //         $ctrl.newTodo = '';\n        //     })\n        //     .finally(function () {\n        //         $ctrl.saving = false;\n        //     });\n    };\n\n    $ctrl.editTodo = function (todo) {\n        $ctrl.editedTodo = todo;\n        // Clone the original todo to restore it on demand.\n        $ctrl.originalTodo = angular.extend({}, todo);\n    };\n\n    $ctrl.saveEdits = function (todo, event) {\n        // Blur events are automatically triggered after the form submit event.\n        // This does some unfortunate logic handling to prevent saving twice.\n        if (event === 'blur' && $ctrl.saveEvent === 'submit') {\n            $ctrl.saveEvent = null;\n            return;\n        }\n\n        $ctrl.saveEvent = event;\n\n        if ($ctrl.reverted) {\n            // Todo edits were reverted-- don't save.\n            $ctrl.reverted = null;\n            return;\n        }\n\n        todo.title = todo.title.trim();\n\n        if (todo.title === $ctrl.originalTodo.title) {\n            $ctrl.editedTodo = null;\n            return;\n        }\n\n        // store[todo.title ? 'put' : 'delete'](todo)\n        //     .then(function success() {\n        //     }, function error() {\n        //         todo.title = $ctrl.originalTodo.title;\n        //     })\n        //     .finally(function () {\n        //         $ctrl.editedTodo = null;\n        //     });\n    };\n\n    $ctrl.revertEdits = function (todo) {\n        todos[todos.indexOf(todo)] = $ctrl.originalTodo;\n        $ctrl.editedTodo = null;\n        $ctrl.originalTodo = null;\n        $ctrl.reverted = true;\n    };\n\n    $ctrl.removeTodo = function (todo) {\n        // store.delete(todo);\n    };\n\n    $ctrl.saveTodo = function (todo) {\n        // store.put(todo);\n    };\n\n    $ctrl.toggleCompleted = function (todo, completed) {\n        if (angular.isDefined(completed)) {\n            todo.completed = completed;\n        }\n\n        // store.put(todo, todos.indexOf(todo))\n        //     .then(function success() {\n        //     }, function error() {\n        //         todo.completed = !todo.completed;\n        //     });\n    };\n\n    $ctrl.clearCompletedTodos = function () {\n        // store.clearCompleted();\n    };\n\n    $ctrl.markAll = function (completed) {\n        todos.forEach(function (todo) {\n            if (todo.completed !== completed) {\n                $ctrl.toggleCompleted(todo, completed);\n            }\n        });\n    };\n}]);\n\n//todoModule.controller('todoController', todoController);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (todoModule);\n\n/*global angular */\n\n/**\r\n * The main controller for the app. The controller:\r\n * - retrieves and persists the model via the todoStorage service\r\n * - exposes the model to the template and provides event handlers\r\n */\n\n/***/ }),\n\n/***/ 36:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 0.82f8b32beecad067e408.js","\n/* injects from baggage-loader */\n\n'use strict';\r\n\r\nimport './todo.scss';\r\n\r\n//import todoController from './todo.controller.js';\r\n\r\nconst todoModule = angular.module('TODO_MVC', [])\r\n    .controller('todoController', function todoController($scope, $stateParams, $filter, api/*, store*/){\r\n        'use strict';\r\n\r\n        var $ctrl = this;\r\n\r\n        api.create.get(function(s){\r\n            console.log(s);\r\n        }, function(er){\r\n            console.log(er);\r\n        });\r\n\r\n        var todos = $ctrl.todos /*= store.todos*/;\r\n\r\n        $ctrl.newTodo = '';\r\n        $ctrl.editedTodo = null;\r\n\r\n        // $scope.$watch('todos', function () {\r\n        //     $ctrl.remainingCount = $filter('filter')(todos, {completed: false}).length;\r\n        //     $ctrl.completedCount = todos.length - $ctrl.remainingCount;\r\n        //     $ctrl.allChecked = !$ctrl.remainingCount;\r\n        // }, true);\r\n\r\n        // Monitor the current route for changes and adjust the filter accordingly.\r\n        $scope.$on('$stateChangeSuccess', function () {\r\n            var status = $ctrl.status = $stateParams.status || '';\r\n\r\n            if (status === 'active') {\r\n                $ctrl.statusFilter = {completed: false};\r\n            }\r\n            else if (status === 'completed') {\r\n                $ctrl.statusFilter = {completed: true};\r\n            }\r\n            else {\r\n                $ctrl.statusFilter = {};\r\n            }\r\n        });\r\n\r\n        $ctrl.addTodo = function () {\r\n            var newTodo = {\r\n                title    : $ctrl.newTodo.trim(),\r\n                completed: false\r\n            };\r\n\r\n            if (!newTodo.title) {\r\n                return;\r\n            }\r\n\r\n            $ctrl.saving = true;\r\n            // store.insert(newTodo)\r\n            //     .then(function success() {\r\n            //         $ctrl.newTodo = '';\r\n            //     })\r\n            //     .finally(function () {\r\n            //         $ctrl.saving = false;\r\n            //     });\r\n        };\r\n\r\n        $ctrl.editTodo = function (todo) {\r\n            $ctrl.editedTodo = todo;\r\n            // Clone the original todo to restore it on demand.\r\n            $ctrl.originalTodo = angular.extend({}, todo);\r\n        };\r\n\r\n        $ctrl.saveEdits = function (todo, event) {\r\n            // Blur events are automatically triggered after the form submit event.\r\n            // This does some unfortunate logic handling to prevent saving twice.\r\n            if (event === 'blur' && $ctrl.saveEvent === 'submit') {\r\n                $ctrl.saveEvent = null;\r\n                return;\r\n            }\r\n\r\n            $ctrl.saveEvent = event;\r\n\r\n            if ($ctrl.reverted) {\r\n                // Todo edits were reverted-- don't save.\r\n                $ctrl.reverted = null;\r\n                return;\r\n            }\r\n\r\n            todo.title = todo.title.trim();\r\n\r\n            if (todo.title === $ctrl.originalTodo.title) {\r\n                $ctrl.editedTodo = null;\r\n                return;\r\n            }\r\n\r\n            // store[todo.title ? 'put' : 'delete'](todo)\r\n            //     .then(function success() {\r\n            //     }, function error() {\r\n            //         todo.title = $ctrl.originalTodo.title;\r\n            //     })\r\n            //     .finally(function () {\r\n            //         $ctrl.editedTodo = null;\r\n            //     });\r\n        };\r\n\r\n        $ctrl.revertEdits = function (todo) {\r\n            todos[todos.indexOf(todo)] = $ctrl.originalTodo;\r\n            $ctrl.editedTodo = null;\r\n            $ctrl.originalTodo = null;\r\n            $ctrl.reverted = true;\r\n        };\r\n\r\n        $ctrl.removeTodo = function (todo) {\r\n            // store.delete(todo);\r\n        };\r\n\r\n        $ctrl.saveTodo = function (todo) {\r\n            // store.put(todo);\r\n        };\r\n\r\n        $ctrl.toggleCompleted = function (todo, completed) {\r\n            if (angular.isDefined(completed)) {\r\n                todo.completed = completed;\r\n            }\r\n\r\n            // store.put(todo, todos.indexOf(todo))\r\n            //     .then(function success() {\r\n            //     }, function error() {\r\n            //         todo.completed = !todo.completed;\r\n            //     });\r\n        };\r\n\r\n        $ctrl.clearCompletedTodos = function () {\r\n            // store.clearCompleted();\r\n        };\r\n\r\n        $ctrl.markAll = function (completed) {\r\n            todos.forEach(function (todo) {\r\n                if (todo.completed !== completed) {\r\n                    $ctrl.toggleCompleted(todo, completed);\r\n                }\r\n            });\r\n        };\r\n    });\r\n\r\n//todoModule.controller('todoController', todoController);\r\n\r\nexport default todoModule;\r\n\r\n/*global angular */\r\n\r\n/**\r\n * The main controller for the app. The controller:\r\n * - retrieves and persists the model via the todoStorage service\r\n * - exposes the model to the template and provides event handlers\r\n */\n\n\n// WEBPACK FOOTER //\n// ./src/app/pages/todo/todo.module.js"],"sourceRoot":""}